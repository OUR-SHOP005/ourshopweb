import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/mongodb';
import Project from '@/models/Project';

// Initial data for seeding the database if empty
const initialProjects = [
  {
    title: 'E-commerce Platform',
    category: 'Web Design',
    image: '/projects/ecommerce-platform.jpg',
    description: 'A modern e-commerce platform with seamless user experience.',
    slug: 'e-commerce-platform',
    status: 'published'
  },
  {
    title: 'Brand Identity',
    category: 'Branding',
    image: '/projects/brand-identity.jpg',
    description: 'Complete brand identity design for a tech startup.',
    slug: 'brand-identity',
    status: 'published'
  },
  {
    title: 'Mobile App UI',
    category: 'UI/UX Design',
    image: '/projects/mobile-app-ui.jpg',
    description: 'User interface design for a fitness tracking app.',
    slug: 'mobile-app-ui',
    status: 'published'
  },
  {
    title: 'Corporate Website',
    category: 'Web Design',
    image: '/projects/corporate-website.jpg',
    description: 'Responsive corporate website with modern design.',
    slug: 'corporate-website',
    status: 'published'
  },
  {
    title: 'Social Media App',
    category: 'Mobile Development',
    image: '/projects/social-media-app.jpg',
    description: 'A social networking platform for creative professionals.',
    slug: 'social-media-app',
    status: 'published'
  },
  {
    title: 'Analytics Dashboard',
    category: 'Web Development',
    image: '/projects/analytics-dashboard.jpg',
    description: 'Real-time analytics dashboard for business intelligence.',
    slug: 'analytics-dashboard',
    status: 'published'
  },
];

// Helper function to seed initial data
async function seedInitialData() {
  try {
    // Check if there are any projects in the database
    const count = await Project.countDocuments();
    
    // If no projects, seed the initial data
    if (count === 0) {
      console.log('Seeding initial projects data...');
      await Project.insertMany(initialProjects);
      console.log('Initial projects data seeded successfully');
    }
  } catch (error) {
    console.error('Error seeding initial projects data:', error);
  }
}

export async function GET(request: NextRequest) {
  try {
    // Connect to the database
    await connectToDatabase();
    
    // Seed initial data if needed
    await seedInitialData();
    
    // Get the URL and params
    const { searchParams } = new URL(request.url);
    const category = searchParams.get('category');
    const slug = searchParams.get('slug');
    const id = searchParams.get('id');
    
    // Build query based on parameters
    let query: any = {};
    
    // If ID is provided, return single project
    if (id) {
      const project = await Project.findById(id);
      if (!project) {
        return NextResponse.json(
          { error: 'Project not found' },
          { status: 404 }
        );
      }
      return NextResponse.json(project);
    }
    
    // Filter by category if specified
    if (category) {
      query.category = category;
    }
    
    // Filter by slug if specified
    if (slug) {
      query.slug = slug;
    }
    
    // Only return published projects for public API
    if (!searchParams.get('admin')) {
      query.status = 'published';
    }
    
    // Execute the query
    const projects = await Project.find(query).lean();
    
    return NextResponse.json(projects);
  } catch (error) {
    console.error('Error fetching projects:', error);
    return NextResponse.json(
      { error: 'Failed to fetch projects' },
      { status: 500 }
    );
  }
}

// Create a new project
export async function POST(request: NextRequest) {
  try {
    // Connect to the database
    await connectToDatabase();
    
    const data = await request.json();
    
    // Validate required fields
    if (!data.title || !data.description || !data.category) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // Create new project
    const newProject = await Project.create({
      title: data.title,
      description: data.description,
      category: data.category,
      image: data.image || '/projects/placeholder.jpg',
      slug: data.slug || '', // Slug will be generated by the pre-validate middleware if not provided
      status: data.status || 'draft'
    });
    
    return NextResponse.json(newProject, { status: 201 });
  } catch (error) {
    console.error('Error creating project:', error);
    
    // Check for validation errors
    if (error instanceof Error && 'name' in error && error.name === 'ValidationError') {
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    
    // Check for duplicate key error (e.g., duplicate slug)
    if (error instanceof Error && 'name' in error && error.name === 'MongoServerError' && 'code' in error && error.code === 11000) {
      return NextResponse.json(
        { error: 'A project with this slug already exists' },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to create project' },
      { status: 500 }
    );
  }
}

// Update an existing project
export async function PUT(request: NextRequest) {
  try {
    // Connect to the database
    await connectToDatabase();
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      );
    }
    
    const data = await request.json();
    
    // Find the project to update
    const project = await Project.findById(id);
    if (!project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      );
    }
    
    // Update the project
    if (data.title) project.title = data.title;
    if (data.description) project.description = data.description;
    if (data.category) project.category = data.category;
    if (data.image) project.image = data.image;
    if (data.slug) project.slug = data.slug;
    if (data.status) project.status = data.status;
    
    // Save the updated project
    const updatedProject = await project.save();
    
    return NextResponse.json(updatedProject);
  } catch (error) {
    console.error('Error updating project:', error);
    
    // Check for validation errors
    if (error instanceof Error && 'name' in error && error.name === 'ValidationError') {
      return NextResponse.json(
        { error: error.message },
        { status: 400 }
      );
    }
    
    // Check for duplicate key error (e.g., duplicate slug)
    if (error instanceof Error && 'name' in error && error.name === 'MongoServerError' && 'code' in error && error.code === 11000) {
      return NextResponse.json(
        { error: 'A project with this slug already exists' },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: 'Failed to update project' },
      { status: 500 }
    );
  }
}

// Delete a project
export async function DELETE(request: NextRequest) {
  try {
    // Connect to the database
    await connectToDatabase();
    
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'Project ID is required' },
        { status: 400 }
      );
    }
    
    // Check if the project exists
    const project = await Project.findById(id);
    if (!project) {
      return NextResponse.json(
        { error: 'Project not found' },
        { status: 404 }
      );
    }
    
    // Delete the project
    await Project.findByIdAndDelete(id);
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error deleting project:', error);
    return NextResponse.json(
      { error: 'Failed to delete project' },
      { status: 500 }
    );
  }
} 